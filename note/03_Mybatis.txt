03_Mybatis.txt
0809

# Mybatis

 - SQL문만 적으면 자동으로 DB에 연결해 데이터를 꺼내오는 프레임워크
 - 거의 모든 jdbc관련 코드를 자동으로 생성해준다
 - 개발자는 사용할 쿼리의 종류와 SQL문만 정해주면 된다
 
# Mybatis dependencies

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency> <!-- 0809 jdbc -->
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency><!-- 0809 mybatis -->
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.10</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency><!-- 0809 -->
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.7</version>
		</dependency>
		
# root-context / namespace에서 mybatis 체크해줘야 한다

	<bean id="config" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="hr" />
		<property name="password" value="1234" />
	</bean>
	
	<bean id="ds" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="config"/> <!-- config를 참조하는 datasource가 된다 -->
	</bean>
	
	<!-- 데이터소스(DBCP)로 SqlSession을 뽑아내는 공장 생성 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" /> <!-- sqlsession이라는 mybatis 인스턴스를 sqlsessionfactory에서 꺼내준다 -->
	</bean>
		
	<mybatis-spring:scan base-package="com.ezen.database.mapper" />
	<!-- 0810 -->
	<mybatis-spring:scan base-package="com.ezen.database.pizza.mapper" />
		
# 어노테이션 방식

	public interface EmployeeMapper {
	
	
	@Select("select * from employees")//"select employee_id, first_name, last_name, job_id, salary, commission_pct, department_id from employees")
	public List<Employee> getList();
	
	@Select("select * from employees where employee_id = #{id}")//"select employee_id, first_name, last_name, job_id, salary, commission_pct, department_id from employees")
	public Employee findById(@Param("id") long id);
	
	@Select("select * from user where first_name = #{name}")
	public Employee findByName(@Param("name") String name);
	
	@Select("select * from user where first_email = #{email}")
	public Employee findByEmail(@Param("email") String email);
	
}



# XML 방식
	- mapper interface와 완전히 같은 패키지에 XML파일을 작성한다.
	
	<?xml version="1.0" encoding="UTF-8" ?>
<!-- 0810 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.database.pizza.mapper.PizzaMapper">
   
   <select  id="getAll" resultType="com.ezen.database.dto.Pizza">
   		select * from pizza
   </select>
  
  <insert id="add" >
  		insert into pizza (id, name, price, calrories) values (pizza_id_seq.nextval, #{name}, #{price}, #{calrories})
  </insert>
  
  <select id="getIdByName" resultType="int">
  		select id from pizza where name = #{name}
  </select>
  
  <select id="getPizza" resultType="com.ezen.database.dto.Pizza">
  		select * from pizza where id = #{id}
  </select>
	
  <update id="update">
  	update pizza SET name = #{name},  price = #{price}, calrories = #{calrories} WHERE id = #{id}
  </update> 
</mapper>

# XML 방식에서 부등호 사용하기

	<select id="getListBetweenEdpt" resultType="com.ezen.database.dto.Employee">
  		select * from employees where
  		<![CDATA[department_id >= #{lower_dept} and department_id <= ${upper_dept}]]> <!-- 부등호를 사용할땐 CDATA 영역 안에 넣어줘야 한다 -->
  		
  </select>
  
  또는 &lt; , &gt; 를 활용
   				